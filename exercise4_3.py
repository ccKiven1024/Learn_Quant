import numpy as np
import pandas as pd
import talib
import multiprocessing as mp
from datetime import date
from time import time
from exercise4_2 import trade, trade1,get_optimal_dea

def get_first_date_index(date_arr, year):
    return np.where(
        ((date_arr > date(year-1, 12, 31)) & (date_arr < date(year, 1, 7)))
    )[0][0]


def main():
    s_clk = time()

    # 0 - 题目数据
    init_capital = 1e6
    init_shares = 0
    cr = 5e-4
    train_interval = (date(2006, 1, 4), date(2013, 12, 31))
    test_interval = (date(2014, 1, 2), date(2023, 8, 31))
    dea1_range = dea2_range = range(-100, 101)

    # 1 - 读取数据
    excel_path = r"./StockData.xlsx"
    df = pd.read_excel(excel_path)
    trade_date = pd.to_datetime(df['Date'].values).date
    _open = df['Open'].values
    _close = df['Close'].values

    # 计算MACD指标
    _dif, _dea, _hist = talib.MACD(
        _close, fastperiod=12, slowperiod=26, signalperiod=9)

    # 判断金/死叉
    gold_cross = np.where((_hist[:-1] < 0) & (_hist[1:] > 0))[0] + 1
    dead_cross = np.where((_hist[:-1] > 0) & (_hist[1:] < 0))[0] + 1

    # 计算范围等
    sample_range = list(map(lambda date:np.where(trade_date == date)[0][0], train_interval))
    start_year, end_year = [date.year for date in test_interval]
    window_yrs = start_year - train_interval[0].year

    # 2 模拟交易
    capital = init_capital
    shares = init_shares
    for y in range(start_year, end_year):
        _, dea1, dea2 = get_optimal_dea(_open,_close,gold_cross,dead_cross,_hist,_dea,dea1_range,dea2_range,init_capital,cr,sample_range)
        irange = [sample_range[1]+1, get_first_date_index(trade_date, y+1)-1]
        records = []
        capital, shares = trade1(trade_date,_open,gold_cross,dead_cross,_hist,_dea,dea1,dea2,capital,shares,cr,irange,records)
        print(
            f"year: {y}, dea1 = {dea1}, dea2 = {dea2}, capital = {capital:.3f}, shares = {shares}, net_asset = {capital+shares*_close[irange[1]]:.3f}, time cost = {time()-s_clk:.3f} s")
        for r in records:
            print(r)

        sample_range = [get_first_date_index(
            trade_date, y-window_yrs+1), irange[1]]

    # 处理最后一年
    y = end_year
    _, dea1, dea2 = get_optimal_dea(_open,_close,gold_cross,dead_cross,_hist,_dea,dea1_range,dea2_range,init_capital,cr,sample_range)
    irange = [sample_range[1]+1, trade_date.shape[0]-1]
    records = []
    capital, shares = trade1(trade_date,_open,gold_cross,dead_cross,_hist,_dea,dea1,dea2,capital,shares,cr,irange,records)
    print(f"year: {y}, dea1 = {dea1}, dea2 = {dea2}, capital = {capital:.3f}, shares = {shares}, net_asset = {capital+shares*_close[irange[1]]:.3f}, time cost = {time()-s_clk:.3f} s")
    for r in records:
            print(r)

if __name__ == "__main__":
    main()

"""
year: 2014, dea1 = 71, dea2 = -11, capital = 1195517.504, shares = 0, net_asset = 1195517.504, time cost = 4.476 s
('2014-01-23', 1, 1704.3016000001226, 445, 2242.24)
('2014-02-26', -1, 956970.7294500001, 0, 2147.74)
('2014-03-24', 1, 933.1495500000892, 442, 2161.9)
('2014-04-22', -1, 965787.32113, 0, 2184.02)
('2014-05-27', 1, 133.53552999999374, 448, 2154.4)
('2014-06-23', -1, 957447.27921, 0, 2137.93)
('2014-07-01', 1, 351.77061000000685, 441, 2169.2)
('2014-07-11', -1, 941997.8320500002, 0, 2136.32)
('2014-07-16', 1, 696.3565200001467, 433, 2172.82)
('2014-07-21', -1, 937335.0628900001, 0, 2164.22)
('2014-07-23', 1, 1143.6711250002263, 427, 2191.39)
('2014-08-15', -1, 998966.2402600001, 0, 2337.99)
('2014-09-05', 1, 867.7404100000858, 410, 2433.17)
('2014-09-17', -1, 982474.2916100002, 0, 2395.36)
('2014-10-09', 1, 2305.452110000304, 395, 2480.2)
('2014-10-15', -1, 967415.9554600003, 0, 2444.54)
('2014-11-03', 1, 858.038020000211, 384, 2515.82)
('2014-11-21', -1, 974786.1903400002, 0, 2537.54)
('2014-11-25', 1, 1720.5406600002898, 367, 2650.08)
('2014-12-25', -1, 1195517.5035800003, 0, 3254.48)
year: 2015, dea1 = 89, dea2 = -11, capital = 1381678.688, shares = 0, net_asset = 1381678.688, time cost = 8.389 s
('2015-02-25', 1, 1933.109630000079, 338, 3529.55)
('2015-03-09', -1, 1167348.71033, 0, 3449.7)
('2015-03-13', 1, 2458.14612499997, 323, 3604.67)
('2015-05-04', -1, 1538407.5072650004, 0, 4757.64)
('2015-07-17', 1, 562.6491050003096, 382, 4023.76)
('2015-11-04', -1, 1328173.6315450002, 0, 3477.16)
('2015-11-05', 1, 2276.314195000101, 365, 3630.78)
('2015-11-20', -1, 1380877.8685950001, 0, 3778.88)
('2015-12-18', 1, 2118.513435000088, 367, 3754.96)
('2015-12-31', -1, 1381678.6882850002, 0, 3760.9)
year: 2016, dea1 = 71, dea2 = -100, capital = 1517931.303, shares = 0, net_asset = 1517931.303, time cost = 12.021 s
('2016-02-05', 1, 294.5613950002007, 463, 2982.06)
('2016-04-13', -1, 1498674.1768050005, 0, 3237.86)
('2016-04-14', 1, 290.6594550006557, 457, 3277.1)
('2016-04-19', -1, 1482043.7023100005, 0, 3243.97)
('2016-06-01', 1, 2705.0426300005056, 466, 3172.96)
('2016-06-17', -1, 1444761.5936600007, 0, 3096.09)
('2016-06-23', 1, 1239.273200000869, 461, 3129.72)
('2016-06-27', -1, 1413557.690735001, 0, 3065.13)
('2016-06-29', 1, 1878.6839750008658, 449, 3142.48)
('2016-07-25', -1, 1447012.085810001, 0, 3220.17)
('2016-08-15', 1, 2673.8876150012948, 437, 3303.47)
('2016-08-26', -1, 1449512.6063650013, 0, 3312.5)
('2016-10-12', 1, 465.98513500136323, 439, 3299.14)
('2016-12-07', -1, 1517931.3029200013, 0, 3458.37)
year: 2017, dea1 = 71, dea2 = 0, capital = 2114.761, shares = 410, net_asset = 1654767.361, time cost = 15.555 s
('2017-01-05', 1, 1420.426420001313, 450, 3368.34)
('2017-03-03', -1, 1541746.8779200015, 0, 3424.66)
('2017-03-27', 1, 2434.446340001421, 441, 3488.76)
('2017-03-30', -1, 1528245.5791300014, 0, 3461.62)
('2017-04-07', 1, 2211.643480001716, 434, 3514.45)
('2017-04-18', -1, 1509559.852350002, 0, 3474.89)
('2017-05-17', 1, 2603.1505500019994, 440, 3423.19)
('2017-07-07', -1, 1606762.2697500018, 0, 3647.64)
('2017-07-21', 1, 2281.21014000196, 429, 3738.18)
('2017-07-27', -1, 1589156.315670002, 0, 3700.86)
('2017-08-24', 1, 3378.2428800023627, 422, 3755.89)
('2017-08-25', -1, 1579304.2656900024, 0, 3736.29)
('2017-08-28', 1, 2973.254070002353, 414, 3805.66)
('2017-09-12', -1, 1588727.3403900024, 0, 3832.24)
('2017-10-11', 1, 2111.8691100024153, 408, 3886.82)
('2017-11-27', -1, 1669561.1673900024, 0, 4088.93)
('2017-12-22', 1, 2114.76084000268, 410, 4064.91)
year: 2018, dea1 = -82, dea2 = 46, capital = 665.719, shares = 510, net_asset = 1536097.219, time cost = 19.083 s
('2018-01-31', -1, 1737231.8682900027, 0, 4234.11)
('2018-07-12', 1, 665.7191400027368, 510, 3403.33)
year: 2019, dea1 = -70, dea2 = 58, capital = 1916450.548, shares = 0, net_asset = 1916450.548, time cost = 22.570 s
('2019-03-12', -1, 1916450.547540003, 0, 3758.32)
year: 2020, dea1 = -63, dea2 = 58, capital = 2406372.492, shares = 0, net_asset = 2406372.492, time cost = 26.180 s
('2020-04-02', 1, 3239.059860002948, 523, 3656.32)
('2020-07-20', -1, 2406372.492060003, 0, 4597.2)
year: 2021, dea1 = -63, dea2 = 46, capital = 2490489.296, shares = 0, net_asset = 2490489.296, time cost = 29.668 s
('2021-03-30', 1, 4656.634260002989, 476, 5043.1)
('2021-06-09', -1, 2490489.2961600027, 0, 5224.95)
year: 2022, dea1 = 28, dea2 = 34, capital = 2239608.331, shares = 0, net_asset = 2239608.331, time cost = 33.291 s
('2022-02-18', 1, 2778.2622600030154, 540, 4604.57)
('2022-07-08', -1, 2414324.2860600036, 0, 4468.06)
('2022-08-15', 1, 1258.3560600038618, 577, 4180.0)
('2022-12-20', -1, 2239608.331205004, 0, 3881.23)
year: 2023, dea1 = -63, dea2 = 46, capital = 2239608.331, shares = 0, net_asset = 2239608.331, time cost = 37.027 s
"""
